// Generated from grammars/Commands.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CommandsLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly NUMBER = 10;
	public static readonly WS = 11;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"NUMBER", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'inserir_inicio('", "')'", "'inserir_fim('", "'remover_inicio()'", 
		"'remover_fim()'", "'removerElemento('", "'inserir_apos('", "','", "'remover_posicao('",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CommandsLexer._LITERAL_NAMES, CommandsLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CommandsLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CommandsLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Commands.g4"; }

	// @Override
	public get ruleNames(): string[] { return CommandsLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CommandsLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CommandsLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CommandsLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\r\x95\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\v\x06\v\x8B\n\v\r\v\x0E\v\x8C\x03\f\x06" +
		"\f\x90\n\f\r\f\x0E\f\x91\x03\f\x03\f\x02\x02\x02\r\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x03\x02\x04\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02" +
		"\x96\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02" +
		"\x05)\x03\x02\x02\x02\x07+\x03\x02\x02\x02\t8\x03\x02\x02\x02\vI\x03\x02" +
		"\x02\x02\rW\x03\x02\x02\x02\x0Fh\x03\x02\x02\x02\x11v\x03\x02\x02\x02" +
		"\x13x\x03\x02\x02\x02\x15\x8A\x03\x02\x02\x02\x17\x8F\x03\x02\x02\x02" +
		"\x19\x1A\x07k\x02\x02\x1A\x1B\x07p\x02\x02\x1B\x1C\x07u\x02\x02\x1C\x1D" +
		"\x07g\x02\x02\x1D\x1E\x07t\x02\x02\x1E\x1F\x07k\x02\x02\x1F \x07t\x02" +
		"\x02 !\x07a\x02\x02!\"\x07k\x02\x02\"#\x07p\x02\x02#$\x07k\x02\x02$%\x07" +
		"e\x02\x02%&\x07k\x02\x02&\'\x07q\x02\x02\'(\x07*\x02\x02(\x04\x03\x02" +
		"\x02\x02)*\x07+\x02\x02*\x06\x03\x02\x02\x02+,\x07k\x02\x02,-\x07p\x02" +
		"\x02-.\x07u\x02\x02./\x07g\x02\x02/0\x07t\x02\x0201\x07k\x02\x0212\x07" +
		"t\x02\x0223\x07a\x02\x0234\x07h\x02\x0245\x07k\x02\x0256\x07o\x02\x02" +
		"67\x07*\x02\x027\b\x03\x02\x02\x0289\x07t\x02\x029:\x07g\x02\x02:;\x07" +
		"o\x02\x02;<\x07q\x02\x02<=\x07x\x02\x02=>\x07g\x02\x02>?\x07t\x02\x02" +
		"?@\x07a\x02\x02@A\x07k\x02\x02AB\x07p\x02\x02BC\x07k\x02\x02CD\x07e\x02" +
		"\x02DE\x07k\x02\x02EF\x07q\x02\x02FG\x07*\x02\x02GH\x07+\x02\x02H\n\x03" +
		"\x02\x02\x02IJ\x07t\x02\x02JK\x07g\x02\x02KL\x07o\x02\x02LM\x07q\x02\x02" +
		"MN\x07x\x02\x02NO\x07g\x02\x02OP\x07t\x02\x02PQ\x07a\x02\x02QR\x07h\x02" +
		"\x02RS\x07k\x02\x02ST\x07o\x02\x02TU\x07*\x02\x02UV\x07+\x02\x02V\f\x03" +
		"\x02\x02\x02WX\x07t\x02\x02XY\x07g\x02\x02YZ\x07o\x02\x02Z[\x07q\x02\x02" +
		"[\\\x07x\x02\x02\\]\x07g\x02\x02]^\x07t\x02\x02^_\x07G\x02\x02_`\x07n" +
		"\x02\x02`a\x07g\x02\x02ab\x07o\x02\x02bc\x07g\x02\x02cd\x07p\x02\x02d" +
		"e\x07v\x02\x02ef\x07q\x02\x02fg\x07*\x02\x02g\x0E\x03\x02\x02\x02hi\x07" +
		"k\x02\x02ij\x07p\x02\x02jk\x07u\x02\x02kl\x07g\x02\x02lm\x07t\x02\x02" +
		"mn\x07k\x02\x02no\x07t\x02\x02op\x07a\x02\x02pq\x07c\x02\x02qr\x07r\x02" +
		"\x02rs\x07q\x02\x02st\x07u\x02\x02tu\x07*\x02\x02u\x10\x03\x02\x02\x02" +
		"vw\x07.\x02\x02w\x12\x03\x02\x02\x02xy\x07t\x02\x02yz\x07g\x02\x02z{\x07" +
		"o\x02\x02{|\x07q\x02\x02|}\x07x\x02\x02}~\x07g\x02\x02~\x7F\x07t\x02\x02" +
		"\x7F\x80\x07a\x02\x02\x80\x81\x07r\x02\x02\x81\x82\x07q\x02\x02\x82\x83" +
		"\x07u\x02\x02\x83\x84\x07k\x02\x02\x84\x85\x07e\x02\x02\x85\x86\x07c\x02" +
		"\x02\x86\x87\x07q\x02\x02\x87\x88\x07*\x02\x02\x88\x14\x03\x02\x02\x02" +
		"\x89\x8B\t\x02\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02" +
		"\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x16\x03\x02\x02\x02" +
		"\x8E\x90\t\x03\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02" +
		"\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02" +
		"\x93\x94\b\f\x02\x02\x94\x18\x03\x02\x02\x02\x05\x02\x8C\x91\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CommandsLexer.__ATN) {
			CommandsLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CommandsLexer._serializedATN));
		}

		return CommandsLexer.__ATN;
	}

}

